<자바스크립트 함수가 실행되는 과정>

- 자바스크립트 코드의 실행
    1. 자바스크립트 엔진은 코드가 없어서 실행 환경(실행 컨텍스트)을 초기화한다.
    2. 스코프(scope)는 코드가 현재 실행되는 환경, 맥락(context)을 의미한다.
    3. this 포인터, 스코프에 저장된 변수들, 스코프 체인 등이 환경에 포함된다.
    4. this 포인터의 경우, 글로벌 스코프에서는 window를 가리킨다.
    5. 함수가 실행되면, 함수 스코프에 따라 환경이 만들어진다.
    6. this, 함수 스코프의 변수들, 그리고 스코프 체인이 형성된다.
    7. 스코프 체인을 따라 글로벌 환경에 도달한다.
    8. 객체의 메서드의 경우, 메서드 환경의 this는 해당 객체를 가리키게 된다.
    9. 하지만 this가 가리키는 것은 환경에 따라 변할 수 있다.

- 실행 컨텍스트(Execution context)
    1. 실행 컨텍스트 혹은 실행 맥락은, 자바스크립트 코드가 실행되는 환경.
    2. 코드에서 참조하는 변수, 객체(함수 포함), this 등에 대한 레퍼런스가 있다.
    3. 실행 컨텍스트는 전역에서 시작해, 함수가 호출될 때 스택에 쌓이게 된다.

- 전역 실행 컨텍스트, 함수 실행 컨텍스트
    1. 자바스크립트가 실행될 때 전역 실행 컨텍스트(Global Execution Context)가 만들어진다.
    2. 함수가 실행될 때 함수 실행 컨텍스트(Function Execution Context)가 만들어진다.

- this가 가리키는 것
    (dynamic binding)
    함수가 호출되는 상황은 4가지가 있음.
        1. 함수 호출 : 함수를 직접 호출
        2. 메서드 호출 : 객체의 메서드를 호출
        3. 생성자 호출 : 새성자 함수를 호출
        4. 간접 호출 : call, apply 등으로 함수를 간접 호출
        ++ 콜백 함수의 호출도 있음
            콜백 함수는 특정 동작 이후 불려지는 함수.
            콜백 함수란 보통 다른 함수의 인자로 보내지는 함수를 의미.
        - 함수는 다양한 상황/환경에서 호출될 수 있다.
        - 함수의 호출 환경에 따라 this는 동적으로 세팅.
        - 동적 바인딩(dynamic binding)이란, this가 환경에 따라 바뀌는 것을 의미.
        - bind, apply, call 등으로 this가 가리키는 것을 조작할 수 있다.

- 화살표 함수와 일반 함수
    1. 화살표 함수의 this는 호출된 함수를 둘러싼 실행 컨텍스트를 가리킨다.
    2. 일반 함수의 this는 새롭게 생성된 실행 컨텍스트를 가리킨다.
    3. 화살표 함수의 this는 정해지면 바꿀 수 없다.
    4. call, bind, apply를 사용해도 바뀌지 않는다.
    5. setTimeout 등 this가 바뀌는 상황에서 유용하다.

- 자바스크립트 Closure
    1. 일급 객체란, 다른 변수처럼 대상을 다룰 수 있는 것을 말함.
    2. 자바스크립트에서 함수는 일급 객체이다.
    3. 즉, 자바스크립트에서 함수는 변수처럼 다룰 수 있다.
    4. 자바스크립트 클로저는 함수의 일급 객체 성질을 이용한다.
    5. 함수가 생성될 때, 함수 내부에서 사용되는 변수들이 외부에 존재하는 경우 그 변수들은 함수의 스코프(scope)에 저장
    6. 함수와 함수가 사용하는 변수들을 저장한 공간을 클로저라 한다.

- Rest Operator
    1. 함수의 인자, 배열, 객체 중 나머지 값을 묶어 사용하도록 한다.
    2. 함수의 인자 중 나머지를 가리킨다.
    3. 배열의 나머지 인자를 가리킨다.
    4. 객체의 나머지 필드를 가리킨다.

- Spread Operator
    1. 묶인 배열 혹은 객체를 각각의 필드로 변환.
    2. 객체는 또 다른 객체로의 spread를 지원.
    3. 배열은 또 다른 배열의 인자, 함수의 인자로의 spread를 지원.